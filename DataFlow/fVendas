let
    Import = 
        let
            Hoje = Date.From(DateTime.LocalNow()), // Obtém a data de hoje
            Dias = 10*365, // Número de dias para 1 ano atrás
            ListaDatas = List.Buffer(List.Dates(Hoje, Dias, #duration(-1,0,0,0))), // Cria a lista decrescente
            ApenasDiasUteis = List.Select(ListaDatas, each Date.DayOfWeek(_, Day.Sunday) <> 0 and Date.DayOfWeek(_, Day.Sunday) <> 6), // Filtra apenas dias úteis
            TabelaDatas = Table.FromList(ApenasDiasUteis, Splitter.SplitByNothing(), {"Data"}), // Converte para tabela
            QtdePedidosDia = Table.AddColumn(TabelaDatas,"PedidosPorDia", each List.Numbers(1,Number.Round(Number.RandomBetween(10,50),0))),
            ExpandePedidosDia = Table.RemoveColumns(Table.ExpandListColumn(QtdePedidosDia, "PedidosPorDia"),{"PedidosPorDia"}),
            DatasCrescentes = Table.Buffer(Table.Sort(ExpandePedidosDia,{{"Data", Order.Ascending}})),
            Pedidos = Table.AddIndexColumn(DatasCrescentes, "Pedido", 1000000, 1, Int64.Type),
            
            // Adiciona a coluna Status
            AdicionaColunaStatus = 
                let
                    QtdePedidos = List.Count(List.Buffer(Pedidos[Pedido])),
                    PedidoMin = List.Min(List.Buffer(Pedidos[Pedido])),
                    PedidoMax = List.Max(List.Buffer(Pedidos[Pedido])),
                    DoisPorCento = Number.Round(QtdePedidos * 0.02,0),
                    ListaDoisPorCento = List.Transform({1..DoisPorCento},each Number.Round(Number.RandomBetween(PedidoMin, PedidoMax))),
                    Status = Table.AddColumn(Pedidos,"Status", each if List.Contains(ListaDoisPorCento,[Pedido]) = false then 0 else Number.Round(Number.RandomBetween(1,2),0),Int64.Type)
                in
                    Status,

            //Lista de Clientes
            ListaDeClientes =  List.Buffer({1..5570}),
            //Adiciona a coluna clientes
            AdicionaColunaClientes = Table.AddColumn(
                AdicionaColunaStatus,
                "Clientes",
                each ListaDeClientes{Number.RoundDown(Number.RandomBetween(0,List.Count(ListaDeClientes)),0)}
            ),

            //Lista de Vendedores
            ListaDeVendedor = List.Buffer({10,20,30}),
            //Adiciona a coluna Vendedores
            AdicionaColunaVendedor = Table.AddColumn(
                AdicionaColunaClientes,
                "Vendedor",
                each ListaDeVendedor{Number.RoundDown(Number.RandomBetween(0,List.Count(ListaDeVendedor)),0)}
            ),

            //Lista de Pagto
            ListaDePgto = List.Buffer({100,200,300,800}),
            //Adiciona a coluna de Pgto
            AdiconaColunaPgto =  Table.AddColumn(
                AdicionaColunaVendedor,
                "Pgto",
                each ListaDePgto{Number.RoundDown(Number.RandomBetween(0,List.Count(ListaDePgto)),0)}
            ),

            // Define a lista de produtos disponíveis
            ListaDeProdutos = List.Buffer({1001 .. 1020}),

            AdicionaColunaProdutos = Table.AddColumn(AdiconaColunaPgto, "Produtos", each 
                let
                    QuantidadeDeProdutos = Number.Round(Number.RandomBetween(1, 5), 0), // Gera um número entre 1 e 5
                    ProdutosIniciais = List.Transform(
                        {1..QuantidadeDeProdutos}, (_) => 
                        ListaDeProdutos{Number.Round(Number.RandomBetween(0, List.Count(ListaDeProdutos) - 1), 0)} // Seleciona produtos aleatórios
                    ),
                    ProdutoBonificado = 
                        if 
                            Number.Random() < 0.3 
                        then // 30% de chance de ter um produto bonificado
                            let
                                ProdutoParaBonificar = ProdutosIniciais{Number.Round(Number.RandomBetween(0, List.Count(ProdutosIniciais) - 1), 0)}
                            in
                                ProdutosIniciais & {ProdutoParaBonificar} // Adiciona o produto bonificado à lista
                        else
                            ProdutosIniciais
                in
                    ProdutoBonificado
            ),

            ExpandeProdutos = Table.ExpandListColumn(AdicionaColunaProdutos, "Produtos"),
            AgruparPedidoProduto = Table.Group(ExpandeProdutos, {"Pedido", "Produtos", "Data"}, {{"Tudo", each _, type table [Pedido=number, Status=number, Produtos=number]}}),
            AddIdTabelaInterna = Table.TransformColumns(AgruparPedidoProduto,{"Tudo", each Table.AddIndexColumn(_,"Tipo",1,1,Int64.Type)}),
            RemoverColunasInternas = Table.TransformColumns(AddIdTabelaInterna, {"Tudo", each Table.RemoveColumns(_,{"Pedido", "Produtos","Data"})}),
            RemoverLinhasInternas = Table.TransformColumns(RemoverColunasInternas,{"Tudo", each Table.SelectRows(_, each [Tipo] <= 2)}),

            //Função Data Fechamento
            GerarDataFechamento = (DataVenda as date) as date =>
                let
                    DiasAdicionais = Number.Round(Number.RandomBetween(1, 3),0),
                    DataFechamentoInicial = Date.AddDays(DataVenda, DiasAdicionais),
                    DiaSemana = Date.DayOfWeek(DataFechamentoInicial, Day.Monday)
                in
                    if 
                        DiaSemana = 5 
                    then  
                        Date.AddDays(DataFechamentoInicial, -1)
                    else 
                        if 
                            DiaSemana = 6 
                        then  
                            Date.AddDays(DataFechamentoInicial, 1)
                        else
                            DataFechamentoInicial,

            ExpandeColunas = Table.ExpandTableColumn(RemoverLinhasInternas, "Tudo", 
                {"Status", "Clientes", "Vendedor", "Pgto", "Tipo"}
            ),
            AdicionaColunaFechamento = Table.AddColumn(ExpandeColunas, "Caixa", each GerarDataFechamento([Data]), type date),
            AdicionaColunaDesconto = 
                Table.AddColumn(AdicionaColunaFechamento,"Desconto", each 
                        let
                            e1 = [Tipo],
                            e2 = Number.RandomBetween(0.97,1.03),
                            e3 = 
                                if 
                                    e1 = 2
                                then
                                    0
                                else
                                    e2 
                        in
                            e3
                    )            ,
            TipificarAsColunas = Table.TransformColumns(
                AdicionaColunaDesconto,
                {
                    {"Pedido", each Int64.From(_), Int64.Type},
                    {"Produtos", each Int64.From(_), Int64.Type},
                    {"Data", each Date.From(_), type date},
                    {"Status", each Int64.From(_), Int64.Type},
                    {"Clientes", each Int64.From(_), Int64.Type},
                    {"Vendedor", each Int64.From(_), Int64.Type},
                    {"Pgto", each Int64.From(_), Int64.Type},
                    {"Tipo", each Int64.From(_), Int64.Type},
                    {"Caixa", each Date.From(_), type date},
                    {"Desconto", each Percentage.From(_), Percentage.Type}
                }    
            )
        in
            TipificarAsColunas
in
    Import
